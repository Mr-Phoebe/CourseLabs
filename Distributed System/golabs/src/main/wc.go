package main

import (
    "os"
    "fmt"
    "mapreduce"
    "strconv"
    "container/list"
    "strings"
)
// our simplified version of MapReduce does not supply a
// key to the Map function, as in the paper; only a value,
// which is a part of the input file content. the return
// value should be a list of key/value pairs, each represented
// by a mapreduce.KeyValue.
func Map(value string) *list.List {
    words := strings.FieldsFunc(value, func(char rune) bool {
        switch char {
        case 'a','A','b','B','c','C','d','D','e','E','f','F','g','G','h','H','i','I','j','J','k','K','l','L','m','M','n','N','o','O','p','P','q','Q','r','R','s','S','t','T','u','U','v','V','w','W','x','X','y','Y','z','Z':
          return false
        }
        return true
    })
    m := make(map[string]int)
    for i := 0; i < len(words); i++ {
        m[words[i]] += 1
    }
    l := list.New()
    for key, value  := range m {
        l.PushBack(mapreduce.KeyValue{key, strconv.Itoa(value)})
    }
    return l
}

// called once for each key generated by Map, with a list
// of that key's string value. should return a single
// output value for that key.
func Reduce(key string, values *list.List) string {
    var ans int = 0 
    for e := values.Front(); e != nil; e = e.Next() {
        num, err := strconv.Atoi(e.Value.(string))
        if err != nil {
            panic(err)
        }
        ans = ans + num
    }
    return strconv.Itoa(ans)
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master x.txt sequential)
// 2) Master (e.g., go run wc.go master x.txt localhost:7777)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) != 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		if os.Args[3] == "sequential" {
			mapreduce.RunSingle(5, 3, os.Args[2], Map, Reduce)
		} else {
			mr := mapreduce.MakeMapReduce(5, 3, os.Args[2], os.Args[3])
			// Wait until MR is done
			<-mr.DoneChannel
		}
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], Map, Reduce, 100)
	}
}
